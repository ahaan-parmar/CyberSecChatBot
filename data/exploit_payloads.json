[
  {
    "name": "SQL Injection - Union Based",
    "type": "SQL Injection",
    "target": "Web Applications",
    "description": "Union-based SQL injection technique that allows extracting data from database by combining results from multiple SELECT statements.",
    "payload": "' UNION SELECT username, password FROM users--",
    "risk_level": "High",
    "countermeasures": "Use parameterized queries, input validation, least privilege database access, and regular security testing. Implement web application firewalls (WAF) to filter malicious requests.",
    "detection_methods": [
      "Monitor database logs for unusual queries",
      "Implement anomaly detection for SQL patterns",
      "Use application security scanners",
      "Monitor for error messages in application logs"
    ],
    "affected_components": ["Database", "Web Application", "API Endpoints"],
    "cwe_reference": "CWE-89",
    "mitigation_priority": "High"
  },
  {
    "name": "Cross-Site Scripting (XSS) - Reflected",
    "type": "Cross-Site Scripting",
    "target": "Web Applications",
    "description": "Reflected XSS attack that executes malicious scripts in the victim's browser by reflecting user input without proper sanitization.",
    "payload": "<script>alert('XSS')</script>",
    "risk_level": "Medium",
    "countermeasures": "Implement input validation, output encoding, Content Security Policy (CSP), and use secure coding practices. Sanitize all user inputs and encode outputs based on context.",
    "detection_methods": [
      "Code review and static analysis",
      "Dynamic application security testing (DAST)",
      "Browser security extensions",
      "Runtime application self-protection (RASP)"
    ],
    "affected_components": ["Web Browser", "Web Application", "Client-Side Scripts"],
    "cwe_reference": "CWE-79",
    "mitigation_priority": "High"
  },
  {
    "name": "Command Injection - OS Commands",
    "type": "Command Injection",
    "target": "System Applications",
    "description": "OS command injection that allows attackers to execute arbitrary system commands on the host operating system via vulnerable applications.",
    "payload": "; cat /etc/passwd",
    "risk_level": "Critical",
    "countermeasures": "Avoid using system calls with user input, implement strict input validation, use safe APIs, principle of least privilege, and sandboxing. Never trust user input for system commands.",
    "detection_methods": [
      "Monitor system command execution",
      "Analyze application logs for suspicious patterns",
      "Use runtime protection tools",
      "Implement command whitelisting"
    ],
    "affected_components": ["Operating System", "System Applications", "Command Shell"],
    "cwe_reference": "CWE-78",
    "mitigation_priority": "Critical"
  },
  {
    "name": "Buffer Overflow - Stack Based",
    "type": "Buffer Overflow",
    "target": "Native Applications",    "description": "Stack-based buffer overflow that overwrites return addresses to redirect program execution flow and potentially execute arbitrary code.",
    "payload": "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA...\\x41\\x41\\x41\\x41",
    "risk_level": "Critical",
    "countermeasures": "Use memory-safe programming languages, implement stack canaries, ASLR, DEP/NX bit, bounds checking, and secure coding practices. Regular code reviews and static analysis.",
    "detection_methods": [
      "Runtime monitoring for stack anomalies",
      "Static code analysis tools",
      "Fuzzing and penetration testing",
      "Memory protection mechanisms"
    ],
    "affected_components": ["Native Applications", "System Memory", "Process Stack"],
    "cwe_reference": "CWE-120",
    "mitigation_priority": "Critical"
  },
  {
    "name": "Directory Traversal - Path Manipulation",
    "type": "Directory Traversal",
    "target": "File Systems",
    "description": "Path traversal attack that allows accessing files and directories outside the intended directory structure by manipulating file paths.",
    "payload": "../../etc/passwd",
    "risk_level": "High",
    "countermeasures": "Implement proper input validation, use canonical paths, restrict file access permissions, and avoid user-controlled file paths. Use whitelisting for allowed files and directories.",
    "detection_methods": [
      "Monitor file access patterns",
      "Log suspicious file path requests",
      "Implement file integrity monitoring",
      "Use application security scanners"
    ],
    "affected_components": ["File System", "Web Applications", "Server Directories"],
    "cwe_reference": "CWE-22",
    "mitigation_priority": "High"
  }
]